import type { NextPage } from "next";
import React, { Key, useState, useEffect } from "react";

import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import axios from "axios";
import absoluteUrl from "next-absolute-url";
import { useRouter } from "next/router";

import StickyNote from "../components/StickyNote";
import AddModal from "../components/AddModal";
import EditModal from "../components/EditModal";
interface stickyNoteProps {
  id: string;
  title: string;
  content: string;
  createdAt: Date;
  published: boolean;
  updatedAt: Date;
}

interface postNote {
  title: string;
  content: string;
}

interface homeProps {
  results: stickyNoteProps[];
}
const Home: NextPage = ({ results }: homeProps) => {
  const [showAddModal, setAddModalVisibility] = useState(false);
  const [showUpdateModal, setUpdateModalVisibility] = useState(false);
  const [selectEditedNote, setSelectEditedNote] = useState({});
  const router = useRouter();

  const handleAddNote = async ({ title, content }: postNote) => {
    try {
      router.reload();
      const { data } = await axios.post(`/api/notes`, { title, content });
    } catch (error) {
      console.error(error);
    }
  };

  const handleEditNote = async ({ title, content }: postNote) => {
    try {
      const { data } = await axios.put(`/api/notes/${selectEditedNote.id}`, {
        title,
        content,
      });
      if (data) {
        console.log("dwd");
        router.reload();
      }
      setUpdateModalVisibility(!showUpdateModal);
      setSelectEditedNote({});
    } catch (error) {
      console.error(error);
    }
  };

  const handleSelectEditedNote = (selectNote: React.SetStateAction<{}>) => {
    setSelectEditedNote(selectNote);
    setUpdateModalVisibility(!showUpdateModal);
  };

  const handleDeleteNote = async (id: string) => {
    try {
      await axios.delete(`/api/notes/${id}`);
      router.reload();
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => console.log(results), [results]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {showAddModal && (
          <AddModal
            onHandleAddNote={handleAddNote}
            showAddModal={showAddModal}
            setAddModalVisibility={setAddModalVisibility}
          />
        )}
        {showUpdateModal && (
          <EditModal
            onHandleEditNote={handleEditNote}
            setSelectEditedNote={setSelectEditedNote}
            selectEditedNote={selectEditedNote}
            showUpdateModal={showUpdateModal}
            setUpdateModalVisibility={setUpdateModalVisibility}
          />
        )}
        <div onClick={() => setAddModalVisibility(!showAddModal)}>
          <svg
            width="75"
            height="75"
            viewBox="0 0 75 75"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M37.5 5.35714C55.1786 5.35714 69.6429 19.8214 69.6429 37.5C69.6429 55.1786 55.1786 69.6429 37.5 69.6429C19.8214 69.6429 5.35714 55.1786 5.35714 37.5C5.35714 19.8214 19.8214 5.35714 37.5 5.35714ZM37.5 0C16.875 0 0 16.875 0 37.5C0 58.125 16.875 75 37.5 75C58.125 75 75 58.125 75 37.5C75 16.875 58.125 0 37.5 0Z"
              fill="#AEAEAE"
            />
            <path
              d="M59 34.8125H40.1875V16H34.8125V34.8125H16V40.1875H34.8125V59H40.1875V40.1875H59V34.8125Z"
              fill="#AEAEAE"
            />
          </svg>
        </div>
        <div className="grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mt-10">
          {results?.map((notes: stickyNoteProps, index: Key | null | undefined) => (
            <StickyNote
              key={index}
              data={notes}
              onSelectEditedNote={handleSelectEditedNote}
              onDeleteNote={handleDeleteNote}
            />
          ))}
        </div>
      </main>
    </div>
  );
};

export async function getServerSideProps({ req }) {
  const { origin } = absoluteUrl(req);
  const apiURL = `${origin}/api/notes`;
  const { data } = await axios.get(apiURL);
  return {
    props: {
      results: data.data.notes,
    },
  };
}

export default Home;
